/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * TypeSpec Orval API
 * OpenAPI spec version: 0.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  HelloHello200,
  PostsCreatePost200,
  PostsCreatePostBody,
  PostsGetPosts200,
  PostsUpdatePost200,
  PostsUpdatePostBody
} from '../../types'



export type helloHelloResponse = {
  data: HelloHello200;
  status: number;
}

export const getHelloHelloUrl = () => {


  return `/`
}

export const helloHello = async ( options?: RequestInit): Promise<helloHelloResponse> => {
  
  const res = await fetch(getHelloHelloUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



export const getHelloHelloQueryKey = () => {
    return [`/`] as const;
    }

    
export const getHelloHelloQueryOptions = <TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHelloHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof helloHello>>> = ({ signal }) => helloHello({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData> & { queryKey: QueryKey }
}

export type HelloHelloQueryResult = NonNullable<Awaited<ReturnType<typeof helloHello>>>
export type HelloHelloQueryError = Promise<Error>


export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof helloHello>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof helloHello>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getHelloHelloQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getHelloHelloSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHelloHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof helloHello>>> = ({ signal }) => helloHello({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData> & { queryKey: QueryKey }
}

export type HelloHelloSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof helloHello>>>
export type HelloHelloSuspenseQueryError = Promise<Error>


export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getHelloHelloSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export type postsGetPostsResponse = {
  data: PostsGetPosts200;
  status: number;
}

export const getPostsGetPostsUrl = () => {


  return `/posts`
}

export const postsGetPosts = async ( options?: RequestInit): Promise<postsGetPostsResponse> => {
  
  const res = await fetch(getPostsGetPostsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



export const getPostsGetPostsQueryKey = () => {
    return [`/posts`] as const;
    }

    
export const getPostsGetPostsQueryOptions = <TData = Awaited<ReturnType<typeof postsGetPosts>>, TError = Promise<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostsGetPostsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postsGetPosts>>> = ({ signal }) => postsGetPosts({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData> & { queryKey: QueryKey }
}

export type PostsGetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof postsGetPosts>>>
export type PostsGetPostsQueryError = Promise<Error>


export function usePostsGetPosts<TData = Awaited<ReturnType<typeof postsGetPosts>>, TError = Promise<Error>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsGetPosts>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function usePostsGetPosts<TData = Awaited<ReturnType<typeof postsGetPosts>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsGetPosts>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function usePostsGetPosts<TData = Awaited<ReturnType<typeof postsGetPosts>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function usePostsGetPosts<TData = Awaited<ReturnType<typeof postsGetPosts>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getPostsGetPostsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPostsGetPostsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof postsGetPosts>>, TError = Promise<Error>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostsGetPostsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postsGetPosts>>> = ({ signal }) => postsGetPosts({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData> & { queryKey: QueryKey }
}

export type PostsGetPostsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof postsGetPosts>>>
export type PostsGetPostsSuspenseQueryError = Promise<Error>


export function usePostsGetPostsSuspense<TData = Awaited<ReturnType<typeof postsGetPosts>>, TError = Promise<Error>>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function usePostsGetPostsSuspense<TData = Awaited<ReturnType<typeof postsGetPosts>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function usePostsGetPostsSuspense<TData = Awaited<ReturnType<typeof postsGetPosts>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function usePostsGetPostsSuspense<TData = Awaited<ReturnType<typeof postsGetPosts>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof postsGetPosts>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getPostsGetPostsSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export type postsCreatePostResponse = {
  data: PostsCreatePost200;
  status: number;
}

export const getPostsCreatePostUrl = () => {


  return `/posts`
}

export const postsCreatePost = async (postsCreatePostBody: PostsCreatePostBody, options?: RequestInit): Promise<postsCreatePostResponse> => {
  
  const res = await fetch(getPostsCreatePostUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      postsCreatePostBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getPostsCreatePostMutationOptions = <TError = Promise<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postsCreatePost>>, TError,{data: PostsCreatePostBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postsCreatePost>>, TError,{data: PostsCreatePostBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postsCreatePost>>, {data: PostsCreatePostBody}> = (props) => {
          const {data} = props ?? {};

          return  postsCreatePost(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostsCreatePostMutationResult = NonNullable<Awaited<ReturnType<typeof postsCreatePost>>>
    export type PostsCreatePostMutationBody = PostsCreatePostBody
    export type PostsCreatePostMutationError = Promise<Error>

    export const usePostsCreatePost = <TError = Promise<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postsCreatePost>>, TError,{data: PostsCreatePostBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postsCreatePost>>,
        TError,
        {data: PostsCreatePostBody},
        TContext
      > => {

      const mutationOptions = getPostsCreatePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export type postsUpdatePostResponse = {
  data: PostsUpdatePost200;
  status: number;
}

export const getPostsUpdatePostUrl = () => {


  return `/posts`
}

export const postsUpdatePost = async (postsUpdatePostBody: PostsUpdatePostBody, options?: RequestInit): Promise<postsUpdatePostResponse> => {
  
  const res = await fetch(getPostsUpdatePostUrl(),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      postsUpdatePostBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getPostsUpdatePostMutationOptions = <TError = Promise<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postsUpdatePost>>, TError,{data: PostsUpdatePostBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postsUpdatePost>>, TError,{data: PostsUpdatePostBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postsUpdatePost>>, {data: PostsUpdatePostBody}> = (props) => {
          const {data} = props ?? {};

          return  postsUpdatePost(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostsUpdatePostMutationResult = NonNullable<Awaited<ReturnType<typeof postsUpdatePost>>>
    export type PostsUpdatePostMutationBody = PostsUpdatePostBody
    export type PostsUpdatePostMutationError = Promise<Error>

    export const usePostsUpdatePost = <TError = Promise<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postsUpdatePost>>, TError,{data: PostsUpdatePostBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postsUpdatePost>>,
        TError,
        {data: PostsUpdatePostBody},
        TContext
      > => {

      const mutationOptions = getPostsUpdatePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
