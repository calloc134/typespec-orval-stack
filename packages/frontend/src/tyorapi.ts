/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * TypeSpec Orval API
 * OpenAPI spec version: 0.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Error,
  HelloHello200,
  UsersCreateUser200,
  UsersCreateUserBody,
  UsersGetUsers200,
  UsersUpdateUser200,
  UsersUpdateUserBody
} from './schemas'



export const helloHello = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HelloHello200>> => {
    
    return axios.default.get(
      `/`,options
    );
  }


export const getHelloHelloQueryKey = () => {
    return [`/`] as const;
    }

    
export const getHelloHelloQueryOptions = <TData = Awaited<ReturnType<typeof helloHello>>, TError = AxiosError<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHelloHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof helloHello>>> = ({ signal }) => helloHello({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData> & { queryKey: QueryKey }
}

export type HelloHelloQueryResult = NonNullable<Awaited<ReturnType<typeof helloHello>>>
export type HelloHelloQueryError = AxiosError<Error>


export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = AxiosError<Error>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof helloHello>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof helloHello>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getHelloHelloQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getHelloHelloSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof helloHello>>, TError = AxiosError<Error>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHelloHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof helloHello>>> = ({ signal }) => helloHello({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData> & { queryKey: QueryKey }
}

export type HelloHelloSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof helloHello>>>
export type HelloHelloSuspenseQueryError = AxiosError<Error>


export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = AxiosError<Error>>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getHelloHelloSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usersGetUsers = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersGetUsers200>> => {
    
    return axios.default.get(
      `/users`,options
    );
  }


export const getUsersGetUsersQueryKey = () => {
    return [`/users`] as const;
    }

    
export const getUsersGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = AxiosError<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetUsers>>> = ({ signal }) => usersGetUsers({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type UsersGetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetUsers>>>
export type UsersGetUsersQueryError = AxiosError<Error>


export function useUsersGetUsers<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = AxiosError<Error>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetUsers>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersGetUsers<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetUsers>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersGetUsers<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useUsersGetUsers<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getUsersGetUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getUsersGetUsersSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = AxiosError<Error>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetUsers>>> = ({ signal }) => usersGetUsers({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type UsersGetUsersSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetUsers>>>
export type UsersGetUsersSuspenseQueryError = AxiosError<Error>


export function useUsersGetUsersSuspense<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = AxiosError<Error>>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersGetUsersSuspense<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersGetUsersSuspense<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useUsersGetUsersSuspense<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = AxiosError<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getUsersGetUsersSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const usersCreateUser = (
    usersCreateUserBody: UsersCreateUserBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersCreateUser200>> => {
    
    return axios.default.post(
      `/users`,
      usersCreateUserBody,options
    );
  }



export const getUsersCreateUserMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersCreateUser>>, TError,{data: UsersCreateUserBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersCreateUser>>, TError,{data: UsersCreateUserBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersCreateUser>>, {data: UsersCreateUserBody}> = (props) => {
          const {data} = props ?? {};

          return  usersCreateUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersCreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof usersCreateUser>>>
    export type UsersCreateUserMutationBody = UsersCreateUserBody
    export type UsersCreateUserMutationError = AxiosError<Error>

    export const useUsersCreateUser = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersCreateUser>>, TError,{data: UsersCreateUserBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof usersCreateUser>>,
        TError,
        {data: UsersCreateUserBody},
        TContext
      > => {

      const mutationOptions = getUsersCreateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const usersUpdateUser = (
    usersUpdateUserBody: UsersUpdateUserBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersUpdateUser200>> => {
    
    return axios.default.patch(
      `/users`,
      usersUpdateUserBody,options
    );
  }



export const getUsersUpdateUserMutationOptions = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersUpdateUser>>, TError,{data: UsersUpdateUserBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersUpdateUser>>, TError,{data: UsersUpdateUserBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersUpdateUser>>, {data: UsersUpdateUserBody}> = (props) => {
          const {data} = props ?? {};

          return  usersUpdateUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersUpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof usersUpdateUser>>>
    export type UsersUpdateUserMutationBody = UsersUpdateUserBody
    export type UsersUpdateUserMutationError = AxiosError<Error>

    export const useUsersUpdateUser = <TError = AxiosError<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersUpdateUser>>, TError,{data: UsersUpdateUserBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof usersUpdateUser>>,
        TError,
        {data: UsersUpdateUserBody},
        TContext
      > => {

      const mutationOptions = getUsersUpdateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
