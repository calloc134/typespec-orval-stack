/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * TypeSpec Orval API
 * OpenAPI spec version: 0.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import type {
  Error,
  HelloHello200,
  UsersCreateUser200,
  UsersCreateUserBody,
  UsersGetUsers200,
  UsersUpdateUser200,
  UsersUpdateUserBody
} from './schemas'



export type helloHelloResponse = {
  data: HelloHello200;
  status: number;
}

export const getHelloHelloUrl = () => {


  return `/`
}

export const helloHello = async ( options?: RequestInit): Promise<helloHelloResponse> => {
  
  const res = await fetch(getHelloHelloUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



export const getHelloHelloQueryKey = () => {
    return [`/`] as const;
    }

    
export const getHelloHelloQueryOptions = <TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHelloHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof helloHello>>> = ({ signal }) => helloHello({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData> & { queryKey: QueryKey }
}

export type HelloHelloQueryResult = NonNullable<Awaited<ReturnType<typeof helloHello>>>
export type HelloHelloQueryError = Promise<Error>


export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof helloHello>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof helloHello>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useHelloHello<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getHelloHelloQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getHelloHelloSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHelloHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof helloHello>>> = ({ signal }) => helloHello({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData> & { queryKey: QueryKey }
}

export type HelloHelloSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof helloHello>>>
export type HelloHelloSuspenseQueryError = Promise<Error>


export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useHelloHelloSuspense<TData = Awaited<ReturnType<typeof helloHello>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof helloHello>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getHelloHelloSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export type usersGetUsersResponse = {
  data: UsersGetUsers200;
  status: number;
}

export const getUsersGetUsersUrl = () => {


  return `/users`
}

export const usersGetUsers = async ( options?: RequestInit): Promise<usersGetUsersResponse> => {
  
  const res = await fetch(getUsersGetUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



export const getUsersGetUsersQueryKey = () => {
    return [`/users`] as const;
    }

    
export const getUsersGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = Promise<Error>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetUsers>>> = ({ signal }) => usersGetUsers({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type UsersGetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetUsers>>>
export type UsersGetUsersQueryError = Promise<Error>


export function useUsersGetUsers<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = Promise<Error>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetUsers>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersGetUsers<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersGetUsers>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersGetUsers<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useUsersGetUsers<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getUsersGetUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getUsersGetUsersSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = Promise<Error>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGetUsers>>> = ({ signal }) => usersGetUsers({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type UsersGetUsersSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof usersGetUsers>>>
export type UsersGetUsersSuspenseQueryError = Promise<Error>


export function useUsersGetUsersSuspense<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = Promise<Error>>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersGetUsersSuspense<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersGetUsersSuspense<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useUsersGetUsersSuspense<TData = Awaited<ReturnType<typeof usersGetUsers>>, TError = Promise<Error>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof usersGetUsers>>, TError, TData>>, fetch?: RequestInit}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getUsersGetUsersSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export type usersCreateUserResponse = {
  data: UsersCreateUser200;
  status: number;
}

export const getUsersCreateUserUrl = () => {


  return `/users`
}

export const usersCreateUser = async (usersCreateUserBody: UsersCreateUserBody, options?: RequestInit): Promise<usersCreateUserResponse> => {
  
  const res = await fetch(getUsersCreateUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      usersCreateUserBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getUsersCreateUserMutationOptions = <TError = Promise<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersCreateUser>>, TError,{data: UsersCreateUserBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof usersCreateUser>>, TError,{data: UsersCreateUserBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersCreateUser>>, {data: UsersCreateUserBody}> = (props) => {
          const {data} = props ?? {};

          return  usersCreateUser(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersCreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof usersCreateUser>>>
    export type UsersCreateUserMutationBody = UsersCreateUserBody
    export type UsersCreateUserMutationError = Promise<Error>

    export const useUsersCreateUser = <TError = Promise<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersCreateUser>>, TError,{data: UsersCreateUserBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof usersCreateUser>>,
        TError,
        {data: UsersCreateUserBody},
        TContext
      > => {

      const mutationOptions = getUsersCreateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export type usersUpdateUserResponse = {
  data: UsersUpdateUser200;
  status: number;
}

export const getUsersUpdateUserUrl = () => {


  return `/users`
}

export const usersUpdateUser = async (usersUpdateUserBody: UsersUpdateUserBody, options?: RequestInit): Promise<usersUpdateUserResponse> => {
  
  const res = await fetch(getUsersUpdateUserUrl(),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      usersUpdateUserBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getUsersUpdateUserMutationOptions = <TError = Promise<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersUpdateUser>>, TError,{data: UsersUpdateUserBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof usersUpdateUser>>, TError,{data: UsersUpdateUserBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersUpdateUser>>, {data: UsersUpdateUserBody}> = (props) => {
          const {data} = props ?? {};

          return  usersUpdateUser(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersUpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof usersUpdateUser>>>
    export type UsersUpdateUserMutationBody = UsersUpdateUserBody
    export type UsersUpdateUserMutationError = Promise<Error>

    export const useUsersUpdateUser = <TError = Promise<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersUpdateUser>>, TError,{data: UsersUpdateUserBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof usersUpdateUser>>,
        TError,
        {data: UsersUpdateUserBody},
        TContext
      > => {

      const mutationOptions = getUsersUpdateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
